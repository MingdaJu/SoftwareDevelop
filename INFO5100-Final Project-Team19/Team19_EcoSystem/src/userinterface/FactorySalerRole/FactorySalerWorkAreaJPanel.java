/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.FactorySalerRole;

import Business.DB4OUtil.DB4OUtil;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.FactorySalerOrganization;
import Business.Organization.MarketSalerOrganization;
import Business.Organization.Organization;
import Business.Organization.ProductionOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.MarketToFactoryRequest;
import Business.WorkQueue.SalerToProductionRequest;
import Business.WorkQueue.SalerToPurchaserRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import userinterface.PurchasingRole.ProcessWorkRequestJPanel;

/**
 *
 * @author jumin
 */
public class FactorySalerWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private FactorySalerOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private EcoSystem system;

    /**
     * Creates new form FactorySalerWorkAreaJPanel
     */
    public FactorySalerWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, FactorySalerOrganization organization, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = account;
        this.system = system;
        //System.out.println(organization.getWorkQueue().getWorkRequestList().get(0));
        populateRequestTable();
        populateTable1();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        assignJButton = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        workRequestJTable1 = new javax.swing.JTable();
        requestTestJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Request ID", "Product ID", "Number", "Sender", "Receiver", "Status", "Result"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });

        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });

        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });

        workRequestJTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Request ID", "Product ID", "Number", "Sender", "Receiver", "Status", "Result"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(workRequestJTable1);

        requestTestJButton.setText("Send To Production");
        requestTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestTestJButtonActionPerformed(evt);
            }
        });

        backJButton.setText("Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(assignJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(processJButton)
                        .addGap(61, 61, 61)
                        .addComponent(requestTestJButton))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(refreshJButton)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(172, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(refreshJButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignJButton)
                    .addComponent(processJButton)
                    .addComponent(requestTestJButton))
                .addGap(29, 29, 29)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(64, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed

        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row!");
            return;
        }

        Object id = workRequestJTable.getValueAt(selectedRow, 0);
        int idd = Integer.parseInt(id.toString());
        for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
            if (request.getRequestID() == idd) {
                if (request.getReceiver()!=null) {
                    JOptionPane.showMessageDialog(null, "You have assigned this request!");
                    return;
                }

                request.setReceiver(userAccount);
                //System.out.println(account);
                request.setStatus("Pending");

            }
        }
        populateRequestTable();


    }//GEN-LAST:event_assignJButtonActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed
        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row!");
            return;
        }
        Object id = workRequestJTable.getValueAt(selectedRow, 0);
        int idd = Integer.parseInt(id.toString());
        for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
            if (request.getRequestID() == idd) {
                if (request.getReceiver() == null) {
                    JOptionPane.showMessageDialog(null, "You haven't assign this request!");
                    return;
                }
                if (request.getStatus().equals("Completed")) {
                    JOptionPane.showMessageDialog(null, "You have been processed this request!");
                    return;
                }
                request.setStatus("Processing");
                ProcessWorkRequestJpanel ProcessWorkRequestJpanel = new ProcessWorkRequestJpanel(userProcessContainer, (MarketToFactoryRequest) request);
                userProcessContainer.add("processWorkRequestJPanel", ProcessWorkRequestJpanel);
                CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                layout.next(userProcessContainer);
            }

        }


    }//GEN-LAST:event_processJButtonActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateRequestTable();
        populateTable1();

    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void requestTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestTestJButtonActionPerformed

        //        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        //        userProcessContainer.add("RequestLabTestJPanel", new RequestLabTestJPanel(userProcessContainer, userAccount, enterprise));
        //        layout.next(userProcessContainer);
        int selectedRow = workRequestJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row!");
            return;
        }
        
        Object id = workRequestJTable.getValueAt(selectedRow, 0);
        int idd = Integer.parseInt(id.toString());
        
        for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
            if (request.getRequestID() == idd) {
                if (((MarketToFactoryRequest) request).getResult().equals("Deny")) {
                    JOptionPane.showMessageDialog(null, "This request has benn denied!");
                    return;

                }
                if(request.getStatus()!=("Completed")){
                    JOptionPane.showMessageDialog(null, "Request has not been processed!");
                    return;
                }
                ((MarketToFactoryRequest)request).setStatus2("senttoproduction");
                //System.out.println(account);
               

            }
        }
        
        SalerToProductionRequest request = new SalerToProductionRequest();
        request.setProductID(workRequestJTable.getValueAt(selectedRow, 1).toString());
        request.setNumber((String) workRequestJTable.getValueAt(selectedRow, 1));
        request.setSender(userAccount);
        request.setStatus("Sent");
        request.setTag("SalerToProduction");

        Organization org = null;
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (organization instanceof ProductionOrganization) {

                org = organization;
                break;
            }
        }

        if (org != null) {
            //equest.setRequestID(org.getWorkQueue().getWorkRequestList().size());
            if (org.getWorkQueue().getWorkRequestList().isEmpty()) {
                int count = 1;
                request.setRequestID(count);
            }
            if (org.getWorkQueue().getWorkRequestList().size() != 0) {

                for (WorkRequest request1 : org.getWorkQueue().getWorkRequestList()) {

                    int a = request1.getRequestID();
                    request.setRequestID(a + 1);

                }

            }
            org.getWorkQueue().getWorkRequestList().add(request);

            userAccount.getWorkQueue().getWorkRequestList().add(request);
            //System.out.println(request.getProductID());
            JOptionPane.showMessageDialog(null, "Sent Successfully");
        }

        populateTable1();
        populateRequestTable();
    }//GEN-LAST:event_requestTestJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedrow = workRequestJTable1.getSelectedRow();
        
        


        if (selectedrow >= 0) {
            Object id = workRequestJTable1.getValueAt(selectedrow, 0);
            int idd = Integer.parseInt(id.toString());
            WorkRequest rqs = null;
            for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()) {
                if (request.getRequestID() == idd) {
                    rqs = request;
                }
            }
            
            
        
            userAccount.getWorkQueue().delete(rqs);

            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (organization instanceof ProductionOrganization) {
                    //enterprise.getOrganizationDirectory().deleteOrg(organization);
                    organization.getWorkQueue().delete(rqs);

                }
            }
            //organization.getWorkQueue().getWorkRequestList().remove(rqs);

            int selectionButton = JOptionPane.YES_NO_OPTION;
            int selectionResult = JOptionPane.showConfirmDialog(null, "Are you Sure to Delete?", "Warning", selectionButton);
            if (selectionResult == JOptionPane.YES_OPTION) {

                DB4OUtil.getInstance().storeSystem(system);
                //populateOrganizationComboBox();
                populateRequestTable();
                populateTable1();
            
        }
        }else {
            JOptionPane.showMessageDialog(null, "Please Select a Row");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    void populateRequestTable() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();

        model.setRowCount(0);
        for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
            if (request.getReceiver() == null || request.getReceiver().equals(userAccount)) {
                if (request.getTag() != null && request.getTag().equals("MarketToFactory")) {
                    if(((MarketToFactoryRequest)request).getStatus2()==null){
                    Object[] row = new Object[7];
                    int requestID = ((MarketToFactoryRequest) request).getRequestID();
                    row[0] = requestID;
                    String productID = ((MarketToFactoryRequest) request).getProductID();
                    row[1] = productID;
                    String number = ((MarketToFactoryRequest) request).getNumber();
                    row[2] = number;
                    row[3] = request.getSender();
                    row[4] = request.getReceiver();
                    row[5] = request.getStatus();
                    String result = ((MarketToFactoryRequest) request).getResult();
                    row[6] = result == null ? "Waiting" : result;

                    model.addRow(row);
                }
                }
            }
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton btnDelete;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton processJButton;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JButton requestTestJButton;
    private javax.swing.JTable workRequestJTable;
    private javax.swing.JTable workRequestJTable1;
    // End of variables declaration//GEN-END:variables

    private void populateTable1() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        DefaultTableModel model = (DefaultTableModel) workRequestJTable1.getModel();

        model.setRowCount(0);

        for (WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()) {

            if (request.getTag() != null && request.getTag().equals("SalerToProduction")) {

                Object[] row = new Object[7];

                row[0] = request.getRequestID();
                String productID = ((SalerToProductionRequest) request).getProductID();
                row[1] = productID;
                String number = ((SalerToProductionRequest) request).getNumber();
                row[2] = number;
                row[3] = request.getSender();
                row[4] = request.getReceiver();
                row[5] = request.getStatus();
                String result = ((SalerToProductionRequest) request).getResult();
                row[6] = result == null ? "Waiting" : result;

                model.addRow(row);
            }
        }
    }
}
