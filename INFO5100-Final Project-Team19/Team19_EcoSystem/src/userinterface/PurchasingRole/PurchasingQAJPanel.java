/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.PurchasingRole;

import Business.DB4OUtil.DB4OUtil;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.EnterpriseDirectory;
import Business.Enterprise.FactoryEnterprise;
import Business.Network.Network;
import Business.Organization.FactorySalerOrganization;
import Business.Organization.Organization;
import Business.Organization.ProductionOrganization;
import Business.Organization.PurchasingOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.QARequest;
import Business.WorkQueue.SalerToProductionRequest;
import Business.WorkQueue.SalerToPurchaserRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.awt.PopupMenu;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jiaqi Zhang
 */
public class PurchasingQAJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem system;
    private UserAccount account;
    private PurchasingOrganization organization;
    private Enterprise enterprise;
    private EnterpriseDirectory directory;

    /**
     * Creates new form PurchasingQAJPanel
     */
    public PurchasingQAJPanel(JPanel userProcessContainer, UserAccount account, PurchasingOrganization organization, Enterprise enterprise, EcoSystem system) {
        initComponents();

        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.system = system;
        this.enterprise = enterprise;
        this.organization = (PurchasingOrganization) organization;
        this.directory = directory;
        populateTable();
        addcombox();
        //popcomboxpid();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        refreshJButton = new javax.swing.JButton();
        requestQAJButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        backJButton3 = new javax.swing.JButton();
        JComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        btnDelete3 = new javax.swing.JButton();
        pidComboBox = new javax.swing.JComboBox();

        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });

        requestQAJButton.setText("Send To Factory");
        requestQAJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestQAJButtonActionPerformed(evt);
            }
        });

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Request ID", "Product ID", "Sender", "Receiver", "Status", "Result", "Factory"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        backJButton3.setText("Back");
        backJButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButton3ActionPerformed(evt);
            }
        });

        JComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setText("Product ID:");

        btnDelete3.setText("Delete");
        btnDelete3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelete3ActionPerformed(evt);
            }
        });

        pidComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pidComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(refreshJButton)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(JComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(requestQAJButton)
                                        .addGap(105, 105, 105))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(pidComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(backJButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(265, 265, 265)
                                .addComponent(btnDelete3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(407, 407, 407))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pidComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refreshJButton)
                    .addComponent(JComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(requestQAJButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backJButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(60, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void requestQAJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestQAJButtonActionPerformed

        QARequest request = new QARequest();
        request.setProductID(pidComboBox.getSelectedItem().toString());
        request.setReceiver(null);
        request.setSender(account);
        request.setStatus("sent");
        request.setFactory((String) JComboBox.getSelectedItem());
        request.setTag("QA");

//        if (proIDTextField.getText().equals("")) {
//            JOptionPane.showMessageDialog(null, "Please input product ID!");
//            return;
//        }
        //account.getWorkQueue().getWorkRequestList().add(request);
        Organization org = null;
        for (Network network : system.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise.getName().equals(JComboBox.getSelectedItem().toString())) {
                    for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                        if (organization instanceof FactorySalerOrganization) {

                            org = organization;
                            break;
                        }
                    }

                    if (org != null) {
                        //request.setRequestID(org.getWorkQueue().getWorkRequestList().size());
                        if (org.getWorkQueue().getWorkRequestList().isEmpty()) {
                            int count = 1;
                            request.setRequestID(count);
                        }
                        if (org.getWorkQueue().getWorkRequestList().size() != 0) {

                            for (WorkRequest request1 : org.getWorkQueue().getWorkRequestList()) {

                                int a = request1.getRequestID();
                                request.setRequestID(a + 1);

                            }

                        }
                        org.getWorkQueue().getWorkRequestList().add(request);
                        account.getWorkQueue().getWorkRequestList().add(request);
                        JOptionPane.showMessageDialog(null, "Sent Successfully");
                        //proIDTextField.setText("");

                    } else {
                        JOptionPane.showMessageDialog(null, "Invalid Request!");
                    }
                }
            }
        }

        populateTable();
    }//GEN-LAST:event_requestQAJButtonActionPerformed

    private void backJButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButton3ActionPerformed

        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        //MarketSalerWorkAreaJPanel dwjp = (MarketSalerWorkAreaJPanel) component;
        //dwjp.populateRequestTable();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButton3ActionPerformed

    private void JComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JComboBoxActionPerformed
        // TODO add your handling code here:
        String etp = JComboBox.getSelectedItem().toString();
        if(etp != null){
            addcomboxpid(etp);
        }
    }//GEN-LAST:event_JComboBoxActionPerformed

    private void btnDelete3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelete3ActionPerformed
        // TODO add your handling code here:
        int selectedrow = workRequestJTable.getSelectedRow();

        if (selectedrow >= 0) {
            Object id = workRequestJTable.getValueAt(selectedrow, 0);
            int idd = Integer.parseInt(id.toString());
            WorkRequest rqs = null;
            for (WorkRequest request : account.getWorkQueue().getWorkRequestList()) {
                if (request.getRequestID() == idd) {
                    rqs = request;
                }
            }

            account.getWorkQueue().delete(rqs);

            for (Network network : system.getNetworkList()) {
                for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                    if (enterprise.getName().equals(JComboBox.getSelectedItem().toString())) {
                        //System.out.println(enterprise.getName());
                        //if (enterprise.getEnterpriseType().equals("Factory")) {
                        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                            if (organization instanceof FactorySalerOrganization) {
                                organization.getWorkQueue().delete(rqs);
                            }
                        }
                    }
                }
            }

            //organization.getWorkQueue().getWorkRequestList().remove(rqs);
            int selectionButton = JOptionPane.YES_NO_OPTION;
            int selectionResult = JOptionPane.showConfirmDialog(null, "Are you Sure to Delete?", "Warning", selectionButton);
            if (selectionResult == JOptionPane.YES_OPTION) {

                DB4OUtil.getInstance().storeSystem(system);
                //populateOrganizationComboBox();
                populateTable();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please Select a Row");
        }
    }//GEN-LAST:event_btnDelete3ActionPerformed

    private void pidComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pidComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pidComboBoxActionPerformed

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();

        model.setRowCount(0);

        for (WorkRequest request : account.getWorkQueue().getWorkRequestList()) {

            if (request.getTag() != null && request.getTag().equals("QA")) {

                Object[] row = new Object[8];

                row[0] = request.getRequestID();
                String productID = ((QARequest) request).getProductID();
                row[1] = productID;
                row[2] = request.getSender();
                row[3] = request.getReceiver();
                row[4] = request.getStatus();
                String result = ((QARequest) request).getResult();
                row[5] = result == null ? "Waiting" : result;
                String factory = ((QARequest) request).getFactory();
                row[6] = factory;

                model.addRow(row);
            }
        }
    }

    public void addcombox() {
        JComboBox.removeAllItems();
        Enterprise etp = null;
        //Organization org = null;
        for (Network network : system.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise instanceof FactoryEnterprise) {
                    for(Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
                    if(organization instanceof ProductionOrganization){
                        for(WorkRequest request : organization.getWorkQueue().getWorkRequestList()){
                            if(((SalerToProductionRequest)request).getResult().equals("Approve")){
                            etp=enterprise;
                   }
                        }
                }
                    }
                    //if (enterprise.getEnterpriseType().equals("Factory")) {
                    
                    //break;
                }

                if (etp != null) {
                    JComboBox.addItem(etp.getName());
                    etp = null;

                }
            }

        }
        //addcomboxpid(etp);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox JComboBox;
    private javax.swing.JButton backJButton3;
    private javax.swing.JButton btnDelete3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox pidComboBox;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JButton requestQAJButton;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables

    private void addcomboxpid(String etp) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        //for(WorkRequest request : organization.getWorkQueue().getWorkRequestList()){
            //Object id = ((SalerToPurchaserRequest)request).getProductID();
            //pidComboBox.addItem(((SalerToPurchaserRequest)request).getProductID());
        //}
        pidComboBox.removeAllItems();
        
        for (Network network : system.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise.getName().equals(etp)) {
                    for(Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()){
                    if(organization instanceof ProductionOrganization){
                        for(WorkRequest request : organization.getWorkQueue().getWorkRequestList()){
                            if(((SalerToProductionRequest)request).getResult().equals("Approve")){
                                pidComboBox.addItem(((SalerToProductionRequest)request).getProductID());
                            }
                        }
                    }
                    }
                }
            }
    }
    }
}
