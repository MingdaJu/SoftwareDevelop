/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.PurchasingRole;

import Business.DB4OUtil.DB4OUtil;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.EnterpriseDirectory;
import Business.Enterprise.FactoryEnterprise;
import Business.Network.Network;
import Business.Organization.FactorySalerOrganization;
import Business.Organization.HrOrganization;
import Business.Organization.PurchasingOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.MarketToFactoryRequest;
import Business.WorkQueue.PurchaserToFactorySalerRequest;
import Business.WorkQueue.SalerToPurchaserRequest;
import Business.WorkQueue.WorkRequest;
import Business.WorkQueue.salerToHrRequest;
import java.awt.CardLayout;
import java.awt.Component;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raunak
 */
public class PurchasingWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem system;
    private UserAccount account;
    private PurchasingOrganization organization;
    private Enterprise enterprise;
    private EnterpriseDirectory directory;

    /**
     * Creates new form LabAssistantWorkAreaJPanel //
     */
//    public PurchasingWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, EcoSystem business) {
//        initComponents();
//        
//        this.userProcessContainer = userProcessContainer;
//        this.userAccount = account;
//        this.business = business;
//        this.labOrganization = (PurchasingOrganization)organization;
//        
//        populateTable();
//    }
    PurchasingWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, PurchasingOrganization organization, Enterprise enterprise, EcoSystem system) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        initComponents();

        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.system = system;
        this.enterprise = enterprise;
        this.organization = (PurchasingOrganization) organization;
        this.directory = directory;
        populateTable();

        populateTable1();
        addcombox();
    }

    public void addcombox() {
        Enterprise etp = null;
        for (Network network : system.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                if (enterprise instanceof FactoryEnterprise) {
                    //if (enterprise.getEnterpriseType().equals("Factory")) {
                    etp = enterprise;
                    //break;
                }

                if (etp != null) {
                    JComboBox.addItem(etp.getName());
                    etp = null;

                }
            }

        }
    }

    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) workRequestJTable2.getModel();

        model.setRowCount(0);
        for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
            if (request.getReceiver() == null || request.getReceiver().equals(account)) {
                if(((SalerToPurchaserRequest) request).getStatus2() == null){
                Object[] row = new Object[7];
                int requestID = ((SalerToPurchaserRequest) request).getRequestID();
                row[0] = requestID;
                String productID = ((SalerToPurchaserRequest) request).getProductID();
                row[1] = productID;
                String number = ((SalerToPurchaserRequest) request).getNumber();
                row[2] = number;
                row[3] = request.getSender();
                row[4] = request.getReceiver();
                row[5] = request.getStatus();
                String result = ((SalerToPurchaserRequest) request).getResult();
                row[6] = result == null ? "Waiting" : result;

                model.addRow(row);
            }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        assignJButton = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();
        requestTestJButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        workRequestJTable2 = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        backJButton3 = new javax.swing.JButton();
        JComboBox = new javax.swing.JComboBox();
        btnDelete3 = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });
        add(assignJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 220, -1, -1));

        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });
        add(processJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 220, -1, -1));

        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        add(refreshJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(406, 26, -1, -1));

        requestTestJButton.setText("Send To Factory");
        requestTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestTestJButtonActionPerformed(evt);
            }
        });
        add(requestTestJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 220, -1, -1));

        workRequestJTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "RequestID", "Product ID", "Number", "Sender", "Receiver", "Status", "Result"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(workRequestJTable2);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 70, 510, 140));

        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Request ID", "Product ID", "Number", "Sender", "Receiver", "Status", "Result", "Factory"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 260, 510, 150));

        backJButton3.setText("Back");
        backJButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButton3ActionPerformed(evt);
            }
        });
        add(backJButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 430, 110, 33));

        JComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JComboBoxActionPerformed(evt);
            }
        });
        add(JComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 220, 100, -1));

        btnDelete3.setText("Delete");
        btnDelete3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelete3ActionPerformed(evt);
            }
        });
        add(btnDelete3, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 430, 110, 33));
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed

        int selectedRow = workRequestJTable2.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row!");
        }

        Object id = workRequestJTable2.getValueAt(selectedRow, 0);
        int idd = Integer.parseInt(id.toString());
        for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
            if (request.getRequestID() == idd) {
                if (request.getReceiver() == null) {
                    request.setReceiver(account);
                    request.setStatus("Pending");
                } else {
                    JOptionPane.showMessageDialog(null, "You have assigned this request!");
                }
                //System.out.println(account);

            }
        }

        populateTable();

    }//GEN-LAST:event_assignJButtonActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed

        int selectedRow = workRequestJTable2.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row!");
            return;
        }

        Object id = workRequestJTable2.getValueAt(selectedRow, 0);
        int idd = Integer.parseInt(id.toString());
        for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
            if (request.getRequestID() == idd) {
                if (request.getReceiver() == null) {
                    JOptionPane.showMessageDialog(null, "You haven't assign this request!");
                    return;
                    //SalerToPurchaserRequest Rrequest = (SalerToPurchaserRequest) request;

                }
                if (request.getStatus().equals("Completed")) {
                    JOptionPane.showMessageDialog(null, "You have been processed this request!");
                    
                } else {

                    request.setStatus("Processing");
                    ProcessWorkRequestJPanel processWorkRequestJPanel = new ProcessWorkRequestJPanel(userProcessContainer, (SalerToPurchaserRequest) request);
                    userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
                    CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                    layout.next(userProcessContainer);
                }
                //System.out.println("ggg");
            }
        }

        //SalerToPurchaserRequest request =(SalerToPurchaserRequest) workRequestJTable2.getValueAt(selectedRow, 0);

    }//GEN-LAST:event_processJButtonActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        populateTable();
        populateTable1();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    private void requestTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestTestJButtonActionPerformed

//        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
//        userProcessContainer.add("RequestLabTestJPanel", new RequestLabTestJPanel(userProcessContainer, userAccount, enterprise));
//        layout.next(userProcessContainer);
        int selectedRow = workRequestJTable2.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row!");
            return;
        }

        Object id = workRequestJTable2.getValueAt(selectedRow, 0);
        int idd = Integer.parseInt(id.toString());
        for (WorkRequest request2 : organization.getWorkQueue().getWorkRequestList()) {
            if (request2.getRequestID() == idd) {
                if (((SalerToPurchaserRequest) request2).getResult().equals("Deny")) {
                    JOptionPane.showMessageDialog(null, "This request has benn denied!");
                    return;

                }

                 if (((SalerToPurchaserRequest) request2).getStatus2() == null || ((SalerToPurchaserRequest) request2).getStatus2().equals("")) {
                    MarketToFactoryRequest request = new MarketToFactoryRequest();
                    String result1 = workRequestJTable2.getValueAt(selectedRow, 5).toString();

                    if (result1.equals("Completed")) {
                        request.setProductID(workRequestJTable2.getValueAt(selectedRow, 1).toString());
                        request.setNumber((String) workRequestJTable2.getValueAt(selectedRow, 2));
                        request.setFactory((String) JComboBox.getSelectedItem());
                        request.setSender(account);
                        request.setStatus("Sent");
                        request.setTag("MarketToFactory");

                        //account.getWorkQueue().getWorkRequestList().add(request);
                        Organization org = null;
                        for (Network network : system.getNetworkList()) {
                            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                                if (enterprise.getName().equals(JComboBox.getSelectedItem().toString())) {
                                    //System.out.println(enterprise.getName());
                                    //if (enterprise.getEnterpriseType().equals("Factory")) {
                                    for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                                        if (organization instanceof FactorySalerOrganization) {

                                            org = organization;
                                            break;
                                        }
                                    }
                                }
                            }
                        }

                        if (org != null) {
                            //request.setRequestID(org.getWorkQueue().getWorkRequestList().size());
                            if (org.getWorkQueue().getWorkRequestList().isEmpty()) {
                                int count = 1;
                                request.setRequestID(count);
                            }
                            if (org.getWorkQueue().getWorkRequestList().size() != 0) {

                                for (WorkRequest request1 : org.getWorkQueue().getWorkRequestList()) {

                                    int a = request1.getRequestID();
                                    request.setRequestID(a + 1);

                                }
                            }
                            org.getWorkQueue().getWorkRequestList().add(request);

                            //System.out.println(request.getFactory());
                            account.getWorkQueue().getWorkRequestList().add(request);
                            ((SalerToPurchaserRequest) request2).setStatus2("senttofactory");
                            //System.out.println(request.getProductID());
                            JOptionPane.showMessageDialog(null, "Sent Successfully");

                        } else {
                            JOptionPane.showMessageDialog(null, "Invalid Request!");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Request has not been processed!");
                    }
                    populateTable1();
                    populateTable();
                    
                }
                 
            }

        }


    }//GEN-LAST:event_requestTestJButtonActionPerformed

    private void backJButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButton3ActionPerformed

        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        //MarketSalerWorkAreaJPanel dwjp = (MarketSalerWorkAreaJPanel) component;
        //dwjp.populateRequestTable();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButton3ActionPerformed

    private void JComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_JComboBoxActionPerformed

    private void btnDelete3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelete3ActionPerformed
        // TODO add your handling code here:
        int selectedrow = workRequestJTable.getSelectedRow();

        if (selectedrow >= 0) {
            Object id = workRequestJTable.getValueAt(selectedrow, 0);
            int idd = Integer.parseInt(id.toString());
            WorkRequest rqs = null;
            for (WorkRequest request : account.getWorkQueue().getWorkRequestList()) {
                if (request.getRequestID() == idd) {
                    rqs = request;
                }
            }

            account.getWorkQueue().delete(rqs);

            for (Network network : system.getNetworkList()) {
                for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                    if (enterprise.getName().equals(JComboBox.getSelectedItem().toString())) {
                        //System.out.println(enterprise.getName());
                        //if (enterprise.getEnterpriseType().equals("Factory")) {
                        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                            if (organization instanceof FactorySalerOrganization) {
                                organization.getWorkQueue().delete(rqs);
                            }
                        }
                    }
                }
            }

            //organization.getWorkQueue().getWorkRequestList().remove(rqs);
            int selectionButton = JOptionPane.YES_NO_OPTION;
            int selectionResult = JOptionPane.showConfirmDialog(null, "Are you Sure to Delete?", "Warning", selectionButton);
            if (selectionResult == JOptionPane.YES_OPTION) {

                DB4OUtil.getInstance().storeSystem(system);
                //populateOrganizationComboBox();
                populateTable1();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please Select a Row");
        }
    }//GEN-LAST:event_btnDelete3ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox JComboBox;
    private javax.swing.JButton assignJButton;
    private javax.swing.JButton backJButton3;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDelete1;
    private javax.swing.JButton btnDelete2;
    private javax.swing.JButton btnDelete3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton processJButton;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JButton requestTestJButton;
    private javax.swing.JTable workRequestJTable;
    private javax.swing.JTable workRequestJTable2;
    // End of variables declaration//GEN-END:variables

    private void populateTable1() {
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();

        model.setRowCount(0);

        for (WorkRequest request : account.getWorkQueue().getWorkRequestList()) {

            if (request.getTag() != null && request.getTag().equals("MarketToFactory")) {
                if (request.getReceiver() == null || request.getSender().equals(account)) {

                    Object[] row = new Object[8];

                    row[0] = request.getRequestID();
                    String productID = ((MarketToFactoryRequest) request).getProductID();
                    row[1] = productID;
                    String number = ((MarketToFactoryRequest) request).getNumber();
                    row[2] = number;
                    row[3] = request.getSender();
                    row[4] = request.getReceiver();
                    row[5] = request.getStatus();
                    String result = ((MarketToFactoryRequest) request).getResult();
                    row[6] = result == null ? "Waiting" : result;
                    String factory = ((MarketToFactoryRequest) request).getFactory();
                    row[7] = factory;

                    model.addRow(row);
                }
            }
        }

    }
}
