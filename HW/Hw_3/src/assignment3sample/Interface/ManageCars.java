/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package assignment3sample.Interface;

import assignment3sample.Business.CarInformationList;
import java.awt.CardLayout;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import assignment3sample.Business.Car;
import java.util.List;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author jumin
 */
public class ManageCars extends javax.swing.JPanel {
    private JPanel userProcessContainer;
    private CarInformationList carInformationList;

   
    ManageCars(JPanel userProcessContainer, CarInformationList carInformation) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.carInformationList=carInformation;
        populateTable();
        getAvailCar();
       getBrand();
       getTime();
    }
    
    public void populateTable(){
    DefaultTableModel dtm=(DefaultTableModel) tblCars.getModel();
    dtm.setRowCount(0);
    for(Car car:carInformationList.getCarList()){
         Object[] row=new Object[9];
         row[0]=car;
         row[1]=car.getManufactured_year();
         row[2]=car.getMin_seats();
         row[3]=car.getMax_seats();
         row[4]=car.getSerial_num();
         row[5]=car.getModel_num();
         row[6]=car.getAvailble_city();
         row[7]=car.isAvailable();
         row[8]=car.isMaintenance_certificate();
         dtm.addRow(row)
                 ;
    }
    }
    
   public void getTime(){
        txtTime.setText((carInformationList.getDate()).toString());
   }
    
    public void getAvailCar(){
        //System.out.println("aaa:" + carInformationList);
        this.carInformationList.UnAvailableNum();
        txtAvailable.setText(String.valueOf(carInformationList.AvailableNum()));
    txtUnAvailable.setText(String.valueOf(carInformationList.UnAvailableNum()));
       txtAvailable.setEditable(false);
       txtUnAvailable.setEditable(false);
    }
    
    public void getBrand(){
      txtBrandList.setText(carInformationList.searchByBrand());
  }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblCars = new javax.swing.JTable();
        btnView = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSearchBrand = new javax.swing.JButton();
        txtBrand = new javax.swing.JTextField();
        btnSearchCity = new javax.swing.JButton();
        txtCity = new javax.swing.JTextField();
        btnSearchModelNumber = new javax.swing.JButton();
        txtModelNumber = new javax.swing.JTextField();
        btnSearchSerialNumber = new javax.swing.JButton();
        txtSerialNumber = new javax.swing.JTextField();
        btnSearchYears = new javax.swing.JButton();
        txtYear = new javax.swing.JTextField();
        btnBack = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtBrandList = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtTime = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtAvailable = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtUnAvailable = new javax.swing.JTextField();
        btnSeats = new javax.swing.JButton();
        txtMaxSeats = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtMinSeats = new javax.swing.JTextField();
        btnCertificate = new javax.swing.JButton();
        btnFind = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCarsCars = new javax.swing.JTable();
        btnView1 = new javax.swing.JButton();

        tblCars.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Brand", "Year", "Min_seats", "Max_seats", "Serial Number", "Model Number", "City", "Available", "Certificate"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCars);
        if (tblCars.getColumnModel().getColumnCount() > 0) {
            tblCars.getColumnModel().getColumn(0).setResizable(false);
            tblCars.getColumnModel().getColumn(1).setResizable(false);
            tblCars.getColumnModel().getColumn(2).setResizable(false);
            tblCars.getColumnModel().getColumn(3).setResizable(false);
            tblCars.getColumnModel().getColumn(4).setResizable(false);
            tblCars.getColumnModel().getColumn(5).setResizable(false);
            tblCars.getColumnModel().getColumn(6).setResizable(false);
            tblCars.getColumnModel().getColumn(7).setResizable(false);
            tblCars.getColumnModel().getColumn(8).setResizable(false);
        }

        btnView.setText("View Details");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSearchBrand.setText("Search by Brand");
        btnSearchBrand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchBrandActionPerformed(evt);
            }
        });

        txtBrand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBrandActionPerformed(evt);
            }
        });

        btnSearchCity.setText("Search by City");
        btnSearchCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchCityActionPerformed(evt);
            }
        });

        txtCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCityActionPerformed(evt);
            }
        });

        btnSearchModelNumber.setText("Search by Model Number");
        btnSearchModelNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchModelNumberActionPerformed(evt);
            }
        });

        txtModelNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtModelNumberActionPerformed(evt);
            }
        });

        btnSearchSerialNumber.setText("Search by Serial Number");
        btnSearchSerialNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchSerialNumberActionPerformed(evt);
            }
        });

        txtSerialNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSerialNumberActionPerformed(evt);
            }
        });

        btnSearchYears.setText("Search by Years");
        btnSearchYears.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchYearsActionPerformed(evt);
            }
        });

        txtYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtYearActionPerformed(evt);
            }
        });

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel1.setText("Last Update Time:");

        txtBrandList.setEditable(false);
        txtBrandList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBrandListActionPerformed(evt);
            }
        });

        jLabel2.setText("Available Car:");

        txtTime.setEditable(false);
        txtTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTimeActionPerformed(evt);
            }
        });

        jLabel3.setText("All Brands:");

        txtAvailable.setEditable(false);
        txtAvailable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAvailableActionPerformed(evt);
            }
        });

        jLabel4.setText("Unvailable Car:");

        txtUnAvailable.setEditable(false);
        txtUnAvailable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUnAvailableActionPerformed(evt);
            }
        });

        btnSeats.setText("Search by Seats");
        btnSeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeatsActionPerformed(evt);
            }
        });

        txtMaxSeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMaxSeatsActionPerformed(evt);
            }
        });

        jLabel5.setText("Max Seats:");

        jLabel6.setText("Min Seats:");

        txtMinSeats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMinSeatsActionPerformed(evt);
            }
        });

        btnCertificate.setText("Expired Certificate");
        btnCertificate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCertificateActionPerformed(evt);
            }
        });

        btnFind.setText("First Available Car");
        btnFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionPerformed(evt);
            }
        });

        tblCarsCars.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Brand", "Year", "Min_seats", "Max_seats", "Serial Number", "Model NUmber", "city", "Available", "certificate"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblCarsCars);
        if (tblCarsCars.getColumnModel().getColumnCount() > 0) {
            tblCarsCars.getColumnModel().getColumn(0).setResizable(false);
            tblCarsCars.getColumnModel().getColumn(1).setResizable(false);
            tblCarsCars.getColumnModel().getColumn(2).setResizable(false);
            tblCarsCars.getColumnModel().getColumn(3).setResizable(false);
            tblCarsCars.getColumnModel().getColumn(4).setResizable(false);
            tblCarsCars.getColumnModel().getColumn(5).setResizable(false);
            tblCarsCars.getColumnModel().getColumn(6).setResizable(false);
            tblCarsCars.getColumnModel().getColumn(7).setResizable(false);
            tblCarsCars.getColumnModel().getColumn(8).setResizable(false);
        }

        btnView1.setText("View Details");
        btnView1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnView1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCertificate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnFind, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtMinSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtMaxSeats, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnSearchBrand, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnSearchCity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnSearchModelNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnSearchSerialNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnSearchYears, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtModelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtSerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(37, 37, 37)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtBrandList, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                                    .addComponent(txtUnAvailable)
                                    .addComponent(txtAvailable)
                                    .addComponent(txtTime)))))
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2)
                    .addComponent(btnView1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(59, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnSearchBrand)
                        .addComponent(txtBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtTime, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnView, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDelete)
                    .addComponent(btnSearchCity)
                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearchModelNumber)
                    .addComponent(txtModelNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtUnAvailable, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCertificate))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearchSerialNumber)
                    .addComponent(txtSerialNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBrandList, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFind))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearchYears)
                    .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBack))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(btnSeats, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtMinSeats)
                    .addComponent(txtMaxSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(68, 68, 68)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnView1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtBrandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBrandActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBrandActionPerformed

    private void txtCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCityActionPerformed

    private void txtModelNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtModelNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtModelNumberActionPerformed

    private void txtSerialNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSerialNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSerialNumberActionPerformed

    private void txtYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtYearActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtYearActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
//        // TODO add your handling code here:
           int selectedRow = tblCars.getSelectedRow();
        if(selectedRow>=0){
            int selectionButton = JOptionPane.YES_NO_OPTION;
            int selectionResult = JOptionPane.showConfirmDialog(null, "Are you sure to delete??","Warning",selectionButton);
            if(selectionResult == JOptionPane.YES_OPTION){
                Car car = (Car)tblCars.getValueAt(selectedRow, 0);
                carInformationList.getCarList().remove(car);
                populateTable();
            }
        }else{
            JOptionPane.showMessageDialog(null, "Please select a Row!!");
        }
       
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
         int selectedRow = tblCars.getSelectedRow();
        
        if(selectedRow>=0){
            Car car= (Car) tblCars.getValueAt(selectedRow,0);
            ViewCars cars= new ViewCars(userProcessContainer,car,this.carInformationList);
            this.userProcessContainer.add("ViewCars",cars);
            CardLayout layout = (CardLayout) this.userProcessContainer.getLayout();
            layout.next(userProcessContainer);
                    
        }
        else{
            JOptionPane.showMessageDialog(null, "Please select a Row!!");
        }
     
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnSearchBrandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchBrandActionPerformed
        // TODO add your handling code here:
        ArrayList<Car> result=carInformationList.searchBrand(txtBrand.getText());
        if (result == null){
        JOptionPane.showMessageDialog(null,"Brand does not exist","Information",JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            DefaultTableModel dtm=(DefaultTableModel) tblCarsCars.getModel();
         dtm.setRowCount(0);
         for(Car car:result){
         Object[] row=new Object[dtm.getColumnCount()];
         row[0]=car;
         row[1]=car.getManufactured_year();
         row[2]=car.getMin_seats();
         row[3]=car.getMax_seats();
         row[4]=car.getSerial_num();
         row[5]=car.getModel_num();
         row[6]=car.getAvailble_city();
         row[7]=car.isAvailable();
         row[8]=car.isMaintenance_certificate();
         dtm.addRow(row);
        }
    }//GEN-LAST:event_btnSearchBrandActionPerformed
    }
    private void btnSearchCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchCityActionPerformed
        // TODO add your handling code here:
        ArrayList<Car> result=carInformationList.searchCity(txtCity.getText());
        if (result == null){
        JOptionPane.showMessageDialog(null,"City does not exist","Information",JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            DefaultTableModel dtm=(DefaultTableModel) tblCarsCars.getModel();
         dtm.setRowCount(0);
         for(Car car:result){
         Object[] row=new Object[dtm.getColumnCount()];
         row[0]=car;
         row[1]=car.getManufactured_year();
         row[2]=car.getMin_seats();
         row[3]=car.getMax_seats();
         row[4]=car.getSerial_num();
         row[5]=car.getModel_num();
         row[6]=car.getAvailble_city();
         row[7]=car.isAvailable();
         row[8]=car.isMaintenance_certificate();
         dtm.addRow(row);
        
        }
        
    }//GEN-LAST:event_btnSearchCityActionPerformed
    }
    private void btnSearchModelNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchModelNumberActionPerformed
        // TODO add your handling code here:
        ArrayList<Car> result=carInformationList.searchModel(txtModelNumber.getText());
        if (result == null){
        JOptionPane.showMessageDialog(null,"Model Number does not exist","Information",JOptionPane.INFORMATION_MESSAGE);
        }
        else{
           DefaultTableModel dtm=(DefaultTableModel) tblCarsCars.getModel();
         dtm.setRowCount(0);
         for(Car car:result){
         Object[] row=new Object[dtm.getColumnCount()];
         row[0]=car;
         row[1]=car.getManufactured_year();
         row[2]=car.getMin_seats();
         row[3]=car.getMax_seats();
         row[4]=car.getSerial_num();
         row[5]=car.getModel_num();
         row[6]=car.getAvailble_city();
         row[7]=car.isAvailable();
         row[8]=car.isMaintenance_certificate();
         dtm.addRow(row);
        
      }
    }//GEN-LAST:event_btnSearchModelNumberActionPerformed
    }
    private void btnSearchSerialNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchSerialNumberActionPerformed
        // TODO add your handling code here:
         ArrayList<Car> result=carInformationList.searchSerial(Integer.parseInt(txtSerialNumber.getText()));
        if (result == null){
        JOptionPane.showMessageDialog(null,"Serial Number does not exist","Information",JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            DefaultTableModel dtm=(DefaultTableModel) tblCarsCars.getModel();
         dtm.setRowCount(0);
         for(Car car:result){
         Object[] row=new Object[dtm.getColumnCount()];
         row[0]=car;
         row[1]=car.getManufactured_year();
         row[2]=car.getMin_seats();
         row[3]=car.getMax_seats();
         row[4]=car.getSerial_num();
         row[5]=car.getModel_num();
         row[6]=car.getAvailble_city();
         row[7]=car.isAvailable();
         row[8]=car.isMaintenance_certificate();
         dtm.addRow(row);
         }
        }
    }//GEN-LAST:event_btnSearchSerialNumberActionPerformed

    private void txtBrandListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBrandListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBrandListActionPerformed

    private void txtTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTimeActionPerformed

    private void txtAvailableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAvailableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAvailableActionPerformed

    private void txtUnAvailableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUnAvailableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUnAvailableActionPerformed

    private void btnSearchYearsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchYearsActionPerformed
        // TODO add your handling code here:
        ArrayList<Car> result=carInformationList.searchYears(Integer.parseInt(txtYear.getText()));
        if (result == null){
        JOptionPane.showMessageDialog(null,"Year does not exist","Information",JOptionPane.INFORMATION_MESSAGE);
        }
        else{
           DefaultTableModel dtm=(DefaultTableModel) tblCarsCars.getModel();
         dtm.setRowCount(0);
         for(Car car:result){
         Object[] row=new Object[dtm.getColumnCount()];
         row[0]=car;
         row[1]=car.getManufactured_year();
         row[2]=car.getMin_seats();
         row[3]=car.getMax_seats();
         row[4]=car.getSerial_num();
         row[5]=car.getModel_num();
         row[6]=car.getAvailble_city();
         row[7]=car.isAvailable();
         row[8]=car.isMaintenance_certificate();
         dtm.addRow(row)
                 ;
         }
        
        }
    }//GEN-LAST:event_btnSearchYearsActionPerformed

    private void btnSeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeatsActionPerformed
        // TODO add your handling code here:
        int maxseat=Integer.parseInt(txtMinSeats.getText());
        int minseat=Integer.parseInt(txtMaxSeats.getText());
        
        ArrayList<Car> seatList=carInformationList.searchSeats(maxseat,minseat);
        if(seatList==null){
        JOptionPane.showMessageDialog(null,"No AvailCar","Information",JOptionPane.INFORMATION_MESSAGE);
        }else{
        DefaultTableModel dtm=(DefaultTableModel) tblCarsCars.getModel();
         dtm.setRowCount(0);
         for(Car car:seatList){
         Object[] row=new Object[dtm.getColumnCount()];
         row[0]=car;
         row[1]=car.getManufactured_year();
         row[2]=car.getMin_seats();
         row[3]=car.getMax_seats();
         row[4]=car.getSerial_num();
         row[5]=car.getModel_num();
         row[6]=car.getAvailble_city();
         row[7]=car.isAvailable();
         row[8]=car.isMaintenance_certificate();
         dtm.addRow(row);
                 } 
        }
        
    }//GEN-LAST:event_btnSeatsActionPerformed

    private void txtMaxSeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMaxSeatsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMaxSeatsActionPerformed

    private void txtMinSeatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMinSeatsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMinSeatsActionPerformed

    private void btnCertificateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCertificateActionPerformed
        // TODO add your handling code here:
         ArrayList<Car> result=carInformationList.searchMainAvail();
         DefaultTableModel dtm=(DefaultTableModel) tblCarsCars.getModel();
         dtm.setRowCount(0);
         
         for(Car car:result){
         Object[] row=new Object[dtm.getColumnCount()];
         row[0]=car;
         row[1]=car.getManufactured_year();
         row[2]=car.getMin_seats();
         row[3]=car.getMax_seats();
         row[4]=car.getSerial_num();
         row[5]=car.getModel_num();
         row[6]=car.getAvailble_city();
         row[7]=car.isAvailable();
         row[8]=car.isMaintenance_certificate();
         dtm.addRow(row);
                 }  
    }//GEN-LAST:event_btnCertificateActionPerformed

    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
        // TODO add your handling code here:
        Car result=carInformationList.FirstCar();
        if (result == null){
        JOptionPane.showMessageDialog(null,"No Car Available","Information",JOptionPane.INFORMATION_MESSAGE);
       }
        else{
            DefaultTableModel dtm=(DefaultTableModel) tblCarsCars.getModel();
    dtm.setRowCount(0);
    
         Object[] row=new Object[dtm.getColumnCount()];
         row[0]=result;
        row[1]=result.getManufactured_year();
        row[2]=result.getMin_seats();
         row[3]=result.getMax_seats();
         row[4]=result.getSerial_num();
         row[5]=result.getModel_num();
         row[6]=result.getAvailble_city();
         row[7]=result.isAvailable();
         row[8]=result.isMaintenance_certificate();
         dtm.addRow(row)
                 ;
    
        
        }
    }//GEN-LAST:event_btnFindActionPerformed

    private void btnView1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnView1ActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblCarsCars.getSelectedRow();
        
        if(selectedRow>=0){
            Car car= (Car) tblCarsCars.getValueAt(selectedRow,0);
            ViewCars cars= new ViewCars(userProcessContainer,car,this.carInformationList);
            this.userProcessContainer.add("ViewCars",cars);
            CardLayout layout = (CardLayout) this.userProcessContainer.getLayout();
            layout.next(userProcessContainer);
                    
        }
        else{
            JOptionPane.showMessageDialog(null, "Please select a Row!!");
        }
    }//GEN-LAST:event_btnView1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCertificate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnFind;
    private javax.swing.JButton btnSearchBrand;
    private javax.swing.JButton btnSearchCity;
    private javax.swing.JButton btnSearchModelNumber;
    private javax.swing.JButton btnSearchSerialNumber;
    private javax.swing.JButton btnSearchYears;
    private javax.swing.JButton btnSeats;
    private javax.swing.JButton btnView;
    private javax.swing.JButton btnView1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblCars;
    private javax.swing.JTable tblCarsCars;
    private javax.swing.JTextField txtAvailable;
    private javax.swing.JTextField txtBrand;
    private javax.swing.JTextField txtBrandList;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtMaxSeats;
    private javax.swing.JTextField txtMinSeats;
    private javax.swing.JTextField txtModelNumber;
    private javax.swing.JTextField txtSerialNumber;
    private javax.swing.JTextField txtTime;
    private javax.swing.JTextField txtUnAvailable;
    private javax.swing.JTextField txtYear;
    // End of variables declaration//GEN-END:variables
}
